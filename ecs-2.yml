AWSTemplateFormatVersion: 2010-09-09
Parameters:
  Subnet1ID:
    Type: String
  Subnet2ID:
    Type: String
  VPCID:
    Type: String
  DomainName:
    Type: String
Resources:
  ACMCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties: 
      DomainName: !Join ['.', ['api', !Ref DomainName]]
      DomainValidationOptions:
        - DomainName: !Join ['.', ['api', !Ref DomainName]]
          ValidationDomain: !Join ['.', ['api', !Ref DomainName]]
      ValidationMethod: DNS
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: aws-ecs-typescript-api
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: aws-ecs-typescript-api-group
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: aws-ecs-typescript-api-role
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: ContainerSecurityGroup
      GroupDescription: Security group for container
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: aws-ecs-typescript-api-task
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      ExecutionRoleArn: !Ref ExecutionRole
      ContainerDefinitions:
        - Name: aws-ecs-typescript-api-container
          Image: nginx:1.17.7
          # REPLACE WITH YOUR ACCOUNT NUMBER AND REGION
          # Image: YOUR_AWS_ACCOUNT_NUMBER.dkr.ecr.YOUR_AWS_REGION.amazonaws.com/aws-ecs-typescript-api
          PortMappings:
            - ContainerPort: 80
            - ContainerPort: 443
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: ecs
      RequiresCompatibilities:
        - EC2
        - FARGATE
  Service:
    Type: AWS::ECS::Service
    Properties:
      # renamed after first deploy
      ServiceName: aws-ecs-typescript-api
      Cluster: !Ref Cluster
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 2
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref Subnet1ID
            - !Ref Subnet2ID
          SecurityGroups:
            - !GetAtt ContainerSecurityGroup.GroupId
      LoadBalancers:
        - TargetGroupArn: !Ref TargetGroup
          ContainerPort: 80
          ContainerName: aws-ecs-typescript-api-container
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: LoadBalancerSecurityGroup
      GroupDescription: Security group for load balancer
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: aws-ecs-typescript-api-alb
      Subnets:
        - !Ref Subnet1ID
        - !Ref Subnet2ID
      SecurityGroups:
        - !GetAtt LoadBalancerSecurityGroup.GroupId

  HTTPSLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: LoadBalancer
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      SslPolicy: "ELBSecurityPolicy-2016-08"
      Certificates: 
      - CertificateArn: !Ref ACMCertificate
  
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: LoadBalancer
    Properties:
      TargetType: ip
      Name: aws-ecs-typescript-api-http-tg
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPCID
  
  ApiDomain:
    Type: AWS::Route53::RecordSet
    DependsOn: LoadBalancer
    Properties:
      HostedZoneName: !Join ['', [!Ref DomainName, .]]
      Name: !Join ['.', ['api', !Ref DomainName]]
      Type: CNAME
      TTL: 60
      ResourceRecords:
        - !GetAtt LoadBalancer.DNSName

# aws cloudformation update-stack --stack-name aws-ecs-typescript-api --template-body file://./ecs-2.yml --capabilities CAPABILITY_NAMED_IAM --parameters ParameterKey=VPCID,ParameterValue=YOUR_VPC_ID ParameterKey=Subnet1ID,ParameterValue=YOUR_SUBNET_1_ID ParameterKey=Subnet2ID,ParameterValue=YOUR_SUBNET_2_ID ParameterKey=DomainName,ParameterValue=YOUR_DOMAIN_NAME.com
